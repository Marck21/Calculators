@page "/mortage"
@using Calculators.Models.Mortage
@using static Calculators.Helpers.MortageHelper

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IMortgageService MortgageService

<PageTitle>Hipoteca</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid Spacing="4">
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4" Elevation="3">
                <MudText Typo="Typo.h5" GutterBottom="true">Datos de la Hipoteca</MudText>

                <MudNumericField @bind-Value="inputs.PrecioVivienda" @bind-Value:after="() => RecalculateAsync()" Label="Precio de la Vivienda" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Euro" Step="1000" />
                <div class="my-4">
                    <MudButtonGroup Variant="Variant.Outlined" FullWidth="true" OverrideStyles="false">
                        <MudButton OnClick="@(() => SetDownPaymentPercentageAndRecalculate( 0.10m ))">10%</MudButton>
                        <MudButton OnClick="@(() => SetDownPaymentPercentageAndRecalculate( 0.20m ))">20%</MudButton>
                        <MudButton OnClick="@(() => SetDownPaymentPercentageAndRecalculate( 0.30m ))">30%</MudButton>
                    </MudButtonGroup>
                </div>
                <MudNumericField @bind-Value="inputs.AportacionInicial" @bind-Value:after="() => RecalculateAsync()" Label="Aportación Inicial (Efectivo)" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Euro" HelperText="Dinero total que aportas (cubre costes + entrada)." Step="1000" />
                <MudAlert Severity="@calculated.AlertSeverity" ShowCloseIcon="false" Class="mb-4" Dense="true">
                    <MudText Typo="Typo.body2" Style="color: inherit;">@((MarkupString)calculated.AlertMessage)</MudText>
                </MudAlert>

                <MudNumericField @bind-Value="inputs.AnosHipoteca" @bind-Value:after="() => RecalculateAsync()" Label="Años de Hipoteca" Variant="Variant.Outlined" Class="mt-4" />
                <MudSlider @bind-Value="inputs.AnosHipoteca" @bind-Value:after="() => RecalculateAsync()" Min="5" Max="40" Class="my-2 d-none d-sm-flex" />

                <MudNumericField @bind-Value="inputs.TipoInteresAnual" @bind-Value:after="() => RecalculateAsync()" Label="Interés Hipoteca TIN (%)" Variant="Variant.Outlined" Format="F2" Step="0.1" Class="mt-4" />
                <MudSlider @bind-Value="inputs.TipoInteresAnual" @bind-Value:after="() => RecalculateAsync()" Min="0.00" Max="10.00" Step="0.1" Class="my-2 d-none d-sm-flex" />

                <MudNumericField @bind-Value="inputs.ImpuestosCompra" @bind-Value:after="() => RecalculateAsync()" Label="Impuestos de Compra (ITP, etc.) (%)" Variant="Variant.Outlined" Format="F2" Class="mt-4" />
                <MudSlider @bind-Value="inputs.ImpuestosCompra" @bind-Value:after="() => RecalculateAsync()" Min="0.00" Max="20.00" Step="0.5" Class="my-2 d-none d-sm-flex" />

                <MudNumericField @bind-Value="inputs.GastosFijosCompra" @bind-Value:after="() => RecalculateAsync()" Label="Gastos Fijos de Compra" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Euro" HelperText="Notaría, registro, gestoría, etc." Step="100" Class="mt-4" />

                <MudExpansionPanels MultiExpansion="true" Class="mt-4">
                    <MudExpansionPanel Text="Finanzas Personales" Expanded="true">
                        <MudNumericField @bind-Value="inputs.SueldoNetoMensual" @bind-Value:after="() => RecalculateAsync()" Label="Sueldo Neto Mensual" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Euro" HelperText="Ingresos netos totales del hogar." Step="100" />
                        <MudNumericField @bind-Value="inputs.PorcentajeMaximoSueldo" @bind-Value:after="() => RecalculateAsync()" Label="% Ratio de Endeudamiento" Variant="Variant.Outlined" Format="F1" Step="0.5" Class="mt-4" />
                        <MudSlider @bind-Value="inputs.PorcentajeMaximoSueldo" @bind-Value:after="() => RecalculateAsync()" Min="1.0" Max="50.0" Step="0.5" Class="my-2 d-none d-sm-flex" />
                        <MudNumericField Value="calculated.PagoMensualMaximoRecomendado" Label="Ratio de Endeudamiento Máximo Recomendado" ReadOnly="true" Variant="Variant.Filled" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Euro" Format="C0" Culture="es" />
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4" Elevation="1">
                <MudText Typo="Typo.h5" GutterBottom="true">Resumen de la Financiación</MudText>
                <MudSimpleTable Dense="true" Class="mt-4">
                    <tbody>
                        <tr><td><strong>Coste Total (sin financiación)</strong></td><td style="text-align: right;"><strong>@calculated.CosteTotalVivienda.ToString( "C0", es )</strong></td></tr>
                        <MudDivider Class="my-2" />
                        <tr><td>Aportación Inicial (Efectivo)</td><td style="text-align: right;">@inputs.AportacionInicial.ToString( "C0", es )</td></tr>
                        <tr><td>(-) Costes de Compra (ITP, etc.)</td><td style="text-align: right;">@calculated.CostesTotalesCompra.ToString( "C0", es )</td></tr>
                        <tr><td><strong>(=) Entrada Neta (sobre precio)</strong></td><td style="text-align: right;"><strong>@calculated.EntradaNeta.ToString( "C0", es )</strong></td></tr>
                        <MudDivider Class="my-2" />
                        <tr><td><strong>Importe del Préstamo</strong></td><td style="text-align: right;"><strong>@calculated.ImportePrestamo.ToString( "C0", es )</strong></td></tr>
                        <tr><td>(+) Total Intereses Pagados</td><td style="text-align: right;">@calculated.CosteTotalIntereses.ToString( "C0", es )</td></tr>
                        <MudDivider Class="my-2" />
                        <tr><td><strong>Coste Total (con financiación)</strong></td><td style="text-align: right;"><strong>@calculated.CosteTotalConIntereses.ToString( "C0", es )</strong></td></tr>
                        <MudDivider Class="my-2" />
                        <tr><td>Porcentaje de Financiación</td><td style="text-align: right;">@calculated.PorcentajeFinanciacion.ToString( "P1" )</td></tr>
                        <tr>
                            <td><strong>% Sueldo para Hipoteca</strong></td>
                            <td style="text-align: right;">
                                <MudText Typo="Typo.h6" Style="font-weight: bold;" Color="@(calculated.PorcentajeSueldoDedicadoHipoteca > ((decimal)inputs.PorcentajeMaximoSueldo / 100) ? Color.Error : Color.Success)">
                                    @calculated.PorcentajeSueldoDedicadoHipoteca.ToString( "P1" )
                                </MudText>
                            </td>
                        </tr>

                        <tr><td><strong>Pago Mensual Hipoteca</strong></td><td style="text-align: right;"><strong>@calculated.PagoMensualHipoteca.ToString( "C0", es )</strong></td></tr>
                    </tbody>
                </MudSimpleTable>
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudContainer>

@code {
    private MortgageInputs inputs = new();
    private MortgageCalculations calculated = new();
    private System.Globalization.CultureInfo es = new System.Globalization.CultureInfo( "es-ES" );
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var savedInputs = await localStorage.GetItemAsync<MortgageInputs>( "mortgageInputs" );
        if ( savedInputs != null )
        {
            inputs = savedInputs;
        }
        isLoading = false;
        await RecalculateAsync( isInitialLoad: true );
    }

    private async Task SetDownPaymentPercentageAndRecalculate( decimal targetTotalPercentage )
    {
        inputs.AportacionInicial = MortgageService.CalculateDownPaymentBasedOnPercentage( inputs, targetTotalPercentage );
        await RecalculateAsync();
    }

    private async Task RecalculateAsync( bool isInitialLoad = false )
    {
        calculated = MortgageService.CalculateMortgage( inputs );

        if ( !isLoading && !isInitialLoad )
        {
            await localStorage.SetItemAsync( "mortgageInputs", inputs );
        }

        StateHasChanged();
    }
}